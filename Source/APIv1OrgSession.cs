/**
* Copyright (C) Squizz PTY LTD
* This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
* This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
* You should have received a copy of the GNU General Public License along with this program.  If not, see http://www.gnu.org/licenses/.
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using EcommerceStandardsDocuments;
using Squizz.Platform.API.v1.endpoint;
using System.Resources;
using System.Reflection;
using System.Web;
using System.Threading;
using System.Globalization;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
namespace Squizz.Platform.API.v1
{
    /// <summary>Represents a session created within the API of the SQUIZZ.com platform for an organisation</summary>
    public class APIv1OrgSession 
    {
        /// <summary>ID of the session within the platform's API</summary>
        private string sessionID = "";

        /// <summary>version of the API that responses are returned from</summary>
        private string apiVersion = "";

        /// <summary>ID of the organisation logged into the API session</summary>
        private string orgID = "";

        /// <summary>API key of the organisation logged into the API session</summary>
        private string apiOrgKey = "";

        /// <summary>API password of the organisation logged into the API session</summary>
        private string apiOrgPassword = "";

        /// <summary>amount of milliseconds by default to timeout requests to the API if no response is returned</summary>
        private int defaultRequestTimeoutMilliseconds = 10000;

        /// <summary>if true then a session has been created in the platform's API</summary>
        private bool sessionExists = false;

        /// <summary>resource manager to control the language that messages in the API are displayed in</summary>
        private ResourceManager langBundle = new ResourceManager("Squizz.Platform.API.Properties.Strings", Assembly.GetExecutingAssembly());

        /// <summary>locale of the language that messages are displayed in for the session</summary>
        public CultureInfo languageLocale = new CultureInfo(APIv1Constants.SUPPORTED_LOCALES_EN_AU);

        /// <summary>Makes a HTTP request to the platform's API to create a new session for an organisation</summary>
        /// <param name="orgID">Unique ID set for the organisation within the platform</param>
        /// <param name="apiOrgKey">Key set for the organisation to allow it login in the API</param>
        /// <param name="apiOrgPassword">Password set for the organisation to allow it to login to the API</param>
        /// <param name="defaultRequestTimeoutMilliseconds">number of milliseconds to wait for a response from calls to the platform's API before giving up</param>
        /// <param name="languageLocale">the locale that specifies the language that the API messages are displayed in</param>
        public APIv1OrgSession(string orgID, string apiOrgKey, string apiOrgPassword, int defaultRequestTimeoutMilliseconds, string languageLocale)
        {
            this.orgID = orgID;
            this.apiOrgKey = apiOrgKey;
            this.apiOrgPassword = apiOrgPassword;
            this.defaultRequestTimeoutMilliseconds = defaultRequestTimeoutMilliseconds;
            this.sessionExists = false;
            this.languageLocale = new CultureInfo(languageLocale);
        }

        /// <summary>gets the ID session generated by the platform's API</summary>
        /// <returns>API session ID</returns>
        public string getSessionID()
        {
            return sessionID;
        }

        /// <summary>gets the version number of the API that the session was created with and using</summary>
        /// <returns>returns empty string if no session has been created in the API yet</returns>
        public string getAPIVersion()
        {
            return apiVersion;
        }
        
        /// <summary>gets the language bundle that controls the language that messages of the API are displayed in</summary>
        /// <returns>Resource bundle</returns>
        public ResourceManager getLangBundle()
        {
            return langBundle;
        }
        
        /// <summary>indicates if the session with the platform's API has been created</summary>
        /// <returns>true if the session has been created</returns>
        public bool doesSessionExist()
        {
            return sessionExists;
        }
        
        /// <summary>
        ///     clears the session's ID, marks that the session has expired and no longer exists in the platform's API
        ///     The method does not destroy the session within the the platform's API, to do so call destroyOrgSession()
        /// </summary>
        public void markSessionExpired()
        {
            sessionExists = false;
            sessionID = "";
        }
        
        /// <summary>calls the platform's API to create a new organisation session</summary>
        /// <returns>response from trying to create the session</returns>
        public APIv1EndpointResponse createOrgSession()
        {
            string endpointParams = "";
            List<KeyValuePair<string, string>> requestHeaders = new List<KeyValuePair<string, string>>();
            requestHeaders.Add(new KeyValuePair<string, string>(APIv1HTTPRequest.HTTP_HEADER_CONTENT_TYPE, APIv1HTTPRequest.HTTP_HEADER_CONTENT_TYPE_FORM_URL_ENCODED));
            APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();

            try{
                //set endpoint parameters
                string requestPostBody = "org_id="+ HttpUtility.UrlEncode(orgID)+"&api_org_key="+ HttpUtility.UrlEncode(apiOrgKey)+"&api_org_pw="+ HttpUtility.UrlEncode(apiOrgPassword)+"&create_session=" + "Y";

                //make a HTTP request to the platform's API endpoint to create a new session
                endpointResponse = APIv1HTTPRequest.sendHTTPRequest(APIv1Constants.HTTP_REQUEST_METHOD_POST, APIv1Constants.API_ORG_ENDPOINT_CREATE_SESSION, endpointParams, requestHeaders, requestPostBody, defaultRequestTimeoutMilliseconds, langBundle, languageLocale, endpointResponse);
            
                //update session credentials if the session was successfully created
                if(endpointResponse.result.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS)
                {
                    apiVersion = endpointResponse.api_version;
                    sessionExists = true;
                    sessionID = endpointResponse.session_id;
                    endpointResponse.session_valid = "Y";
                }
            }
            catch(Exception ex)
            {
                endpointResponse.result = APIv1EndpointResponse.ENDPOINT_RESULT_FAILURE;
                endpointResponse.result_code = APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_UNKNOWN;
			    endpointResponse.result_message = langBundle.GetString(endpointResponse.result_code, languageLocale) + "\n" + ex.Message;
            }
        
            return endpointResponse;
        }
        
        /// <summary>calls the platform's API to destroy an existing organisation session</summary>
        /// <returns>response from trying to destroy the API session</returns>
        public APIv1EndpointResponse destroyOrgSession()
        {
            string endpointParams = "";
            string requestPostBody = "";
            List<KeyValuePair<string, string>> requestHeaders = new List<KeyValuePair<string, string>>();
            APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();

            try{
                //make a HTTP request to the platform's API endpoint to create a new session
                endpointResponse = APIv1HTTPRequest.sendHTTPRequest(APIv1Constants.HTTP_REQUEST_METHOD_GET, APIv1Constants.API_ORG_ENDPOINT_DESTROY_SESSION+APIv1Constants.API_PATH_SLASH+sessionID, endpointParams, requestHeaders, requestPostBody, defaultRequestTimeoutMilliseconds, langBundle, languageLocale, endpointResponse);
            
                //update session credentials if the session was successfully destroyed
                if(endpointResponse.result.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS)
                {
                    sessionExists = false;
                    sessionID = "";
                    endpointResponse.session_valid = "N";
                }
            }
            catch(Exception ex)
            {
                endpointResponse.result = APIv1EndpointResponse.ENDPOINT_RESULT_FAILURE;
                endpointResponse.result_code = APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_UNKNOWN;
			    endpointResponse.result_message = langBundle.GetString(endpointResponse.result_code, languageLocale) + "\n" + ex.Message;
            }

            return endpointResponse;
        }
        
        /// <summary>calls the platform's API to validate an existing organisation session exists and is valid</summary>
        /// <returns>response from trying to validate the API session</returns>
        public APIv1EndpointResponse validateOrgSession()
        {   
            //call the server to validate that the session still exists
            string endpointParams = "";
            string requestPostBody = "";
            List<KeyValuePair<string, string>> requestHeaders = new List<KeyValuePair<string, string>>();
            APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();

            try{
                //make a HTTP request to the platform's API endpoint to create a new session
                endpointResponse = APIv1HTTPRequest.sendHTTPRequest(APIv1Constants.HTTP_REQUEST_METHOD_GET, APIv1Constants.API_ORG_ENDPOINT_VALIDATE_SESSION+APIv1Constants.API_PATH_SLASH+sessionID, endpointParams, requestHeaders, requestPostBody, defaultRequestTimeoutMilliseconds, langBundle, languageLocale, endpointResponse);
            
                //update session credentials if the session was successfully destroyed
                if(endpointResponse.result.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_SUCCESS && endpointResponse.result_code.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_CODE_SUCCESS)
                {
                    apiVersion = endpointResponse.api_version;
                    sessionExists = true;
                    endpointResponse.session_valid = "Y";
                }else{
                    endpointResponse.result = APIv1EndpointResponse.ENDPOINT_RESULT_FAILURE;

                    //clear the session variables
                    if (endpointResponse.result.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_SESSION_INVALID){
                        sessionExists = false;
                        sessionID = "";
                        endpointResponse.session_valid = "N";
                    }
                }
            }
            catch(Exception ex)
            {
                endpointResponse.result = APIv1EndpointResponse.ENDPOINT_RESULT_FAILURE;
                endpointResponse.result_code = APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_UNKNOWN;
			    endpointResponse.result_message = langBundle.GetString(endpointResponse.result_code, languageLocale) + "\n" + ex.Message;
            }

            return endpointResponse;
        }
            
        /// <summary>calls the platform's API to validate an existing organisation session exists and is valid, if not then attempts to login to the API and create a new session</summary>
        /// <returns>response from trying to validate the API session or create the API session</returns>
        public APIv1EndpointResponse validateCreateOrgSession()
        {
            bool createSession = false;
            APIv1EndpointResponse endpointResponse = new APIv1EndpointResponse();
        
            //check if the organisation session is valid
            if(!String.IsNullOrWhiteSpace(sessionID)){
                endpointResponse = validateOrgSession();
            
                //check if the session was validated
                if(endpointResponse.result.ToUpper() == APIv1EndpointResponse.ENDPOINT_RESULT_CODE_ERROR_SESSION_INVALID){
                    createSession = true;
                }
            }else{
                createSession = true;
            }
        
            //attempt to create a new API organisation session
            if(createSession){
                endpointResponse = createOrgSession();
            }
        
            return endpointResponse;
        }
    }
}